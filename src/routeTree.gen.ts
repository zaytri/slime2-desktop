/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

import { Route as rootRouteImport } from './routes/__root';

const IndexLazyRouteImport = createFileRoute('/')();
const SettingsIndexLazyRouteImport = createFileRoute('/settings/')();
const WidgetWidgetIdLazyRouteImport = createFileRoute('/widget/$widgetId')();
const FolderFolderIdLazyRouteImport = createFileRoute('/folder/$folderId')();

const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route));
const SettingsIndexLazyRoute = SettingsIndexLazyRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/settings/index.lazy').then((d) => d.Route),
);
const WidgetWidgetIdLazyRoute = WidgetWidgetIdLazyRouteImport.update({
  id: '/widget/$widgetId',
  path: '/widget/$widgetId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/widget/$widgetId.lazy').then((d) => d.Route),
);
const FolderFolderIdLazyRoute = FolderFolderIdLazyRouteImport.update({
  id: '/folder/$folderId',
  path: '/folder/$folderId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/folder/$folderId.lazy').then((d) => d.Route),
);

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute;
  '/folder/$folderId': typeof FolderFolderIdLazyRoute;
  '/widget/$widgetId': typeof WidgetWidgetIdLazyRoute;
  '/settings': typeof SettingsIndexLazyRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute;
  '/folder/$folderId': typeof FolderFolderIdLazyRoute;
  '/widget/$widgetId': typeof WidgetWidgetIdLazyRoute;
  '/settings': typeof SettingsIndexLazyRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexLazyRoute;
  '/folder/$folderId': typeof FolderFolderIdLazyRoute;
  '/widget/$widgetId': typeof WidgetWidgetIdLazyRoute;
  '/settings/': typeof SettingsIndexLazyRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/folder/$folderId' | '/widget/$widgetId' | '/settings';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/folder/$folderId' | '/widget/$widgetId' | '/settings';
  id:
    | '__root__'
    | '/'
    | '/folder/$folderId'
    | '/widget/$widgetId'
    | '/settings/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  FolderFolderIdLazyRoute: typeof FolderFolderIdLazyRoute;
  WidgetWidgetIdLazyRoute: typeof WidgetWidgetIdLazyRoute;
  SettingsIndexLazyRoute: typeof SettingsIndexLazyRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexLazyRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/settings/': {
      id: '/settings/';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsIndexLazyRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/widget/$widgetId': {
      id: '/widget/$widgetId';
      path: '/widget/$widgetId';
      fullPath: '/widget/$widgetId';
      preLoaderRoute: typeof WidgetWidgetIdLazyRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/folder/$folderId': {
      id: '/folder/$folderId';
      path: '/folder/$folderId';
      fullPath: '/folder/$folderId';
      preLoaderRoute: typeof FolderFolderIdLazyRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  FolderFolderIdLazyRoute: FolderFolderIdLazyRoute,
  WidgetWidgetIdLazyRoute: WidgetWidgetIdLazyRoute,
  SettingsIndexLazyRoute: SettingsIndexLazyRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
