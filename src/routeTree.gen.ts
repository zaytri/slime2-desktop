/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')();
const IndexLazyImport = createFileRoute('/')();
const WidgetWidgetIdLazyImport = createFileRoute('/widget/$widgetId')();
const FolderFolderIdLazyImport = createFileRoute('/folder/$folderId')();

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route));

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route));

const WidgetWidgetIdLazyRoute = WidgetWidgetIdLazyImport.update({
  id: '/widget/$widgetId',
  path: '/widget/$widgetId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/widget/$widgetId.lazy').then((d) => d.Route),
);

const FolderFolderIdLazyRoute = FolderFolderIdLazyImport.update({
  id: '/folder/$folderId',
  path: '/folder/$folderId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/folder/$folderId.lazy').then((d) => d.Route),
);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/settings': {
      id: '/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/folder/$folderId': {
      id: '/folder/$folderId';
      path: '/folder/$folderId';
      fullPath: '/folder/$folderId';
      preLoaderRoute: typeof FolderFolderIdLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/widget/$widgetId': {
      id: '/widget/$widgetId';
      path: '/widget/$widgetId';
      fullPath: '/widget/$widgetId';
      preLoaderRoute: typeof WidgetWidgetIdLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute;
  '/settings': typeof SettingsLazyRoute;
  '/folder/$folderId': typeof FolderFolderIdLazyRoute;
  '/widget/$widgetId': typeof WidgetWidgetIdLazyRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute;
  '/settings': typeof SettingsLazyRoute;
  '/folder/$folderId': typeof FolderFolderIdLazyRoute;
  '/widget/$widgetId': typeof WidgetWidgetIdLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexLazyRoute;
  '/settings': typeof SettingsLazyRoute;
  '/folder/$folderId': typeof FolderFolderIdLazyRoute;
  '/widget/$widgetId': typeof WidgetWidgetIdLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/settings' | '/folder/$folderId' | '/widget/$widgetId';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/settings' | '/folder/$folderId' | '/widget/$widgetId';
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/folder/$folderId'
    | '/widget/$widgetId';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  SettingsLazyRoute: typeof SettingsLazyRoute;
  FolderFolderIdLazyRoute: typeof FolderFolderIdLazyRoute;
  WidgetWidgetIdLazyRoute: typeof WidgetWidgetIdLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  FolderFolderIdLazyRoute: FolderFolderIdLazyRoute,
  WidgetWidgetIdLazyRoute: WidgetWidgetIdLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/folder/$folderId",
        "/widget/$widgetId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/folder/$folderId": {
      "filePath": "folder/$folderId.lazy.tsx"
    },
    "/widget/$widgetId": {
      "filePath": "widget/$widgetId.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
